Function không cho phép insert bảng dữ liệu muốn insert cần tạo store procedure
Cú pháp tạo procedure

CREATE OR REPLACE procedure CBOND_SHB.pr_demo(datainput varchar2, p_language varchar2, p_err_code IN OUT  varchar2)
 IS
BEGIN
	p_err_code := '0';
    FOR i IN 1..5
    LOOP
        INSERT INTO AHIHI VALUES ('2' || i);
    END LOOP;
--    commit;
Exception
When others THEN
	p_err_code := '-1';
    dbms_output.put_line('Err: ' || sqlerrm || ' Trace: ' || dbms_utility.format_error_backtrace);
END
;

Chạy procedure trả về tham số kết quả

DECLARE
amount NUMBER;
BEGIN
PR_DEMO('a',,'b', amount);
dbms_output.put_line(amount);
END;

Cú pháp Function


CREATE OR REPLACE FUNCTION CBOND_SHB.fn_get_errmsg(p_errnum varchar2, p_language varchar2 DEFAULT 'vie')
 RETURN varchar2 
 IS


    l_errdesc   varchar2(2000);

BEGIN
    FOR i IN (SELECT errdesc, en_errdesc
            FROM deferror
            WHERE CAST(nvl(errnum, '0') AS integer) = CAST(nvl(p_errnum, '0') AS integer)
            )
    LOOP
        if p_language <> fn_systemnums('systemnums.vn_lang') then
            l_errdesc   := i.en_errdesc;
        else
            l_errdesc   := i.errdesc;
        end if;
    END LOOP;

    if l_errdesc is null then
        return 'Mã loi [' || to_char(p_errnum) || '] chua duoc dinh nghia.';
    else
        RETURN l_errdesc;
    end if;

Exception
When others then
    return 'Mã loi [' || to_char(p_errnum) || '] chua duoc dinh nghia. / undefine error [' || to_char(p_errnum) || '].';
END

;


Cú pháp vòng For
FOR i IN 1..5
    LOOP
        INSERT INTO AHIHI VALUES ('2' || i);
END LOOP;




Thao tác với Array trong oracle

CREATE OR REPLACE procedure CBOND_SHB.pr_demo(datainput varchar2, p_language varchar2, p_err_code IN OUT  varchar2)
 IS
 
 	l_input varchar2(4000) := '1,2,3';
    l_count binary_integer;
    l_array dbms_utility.lname_array;
-- 	type namesarray IS VARRAY(5) OF VARCHAR2(10); 
-- 	names namesarray;
-- 	
-- 	total integer;
-- 	l_input varchar2(4000) := '1,2,3';
--  	l_count binary_integer;
--  	l_array dbms_utility.lname_array;
 
BEGIN
	l_array := fn_convert_string_to_array('1,2,3,5,6,7,8');
--	dbms_utility.comma_to_table
--     ( list   => regexp_replace(l_input,'(^|,)','\1x')
--      , tablen => l_count
--      , tab    => l_array
--    );
     for i in 1 .. l_array.count -1
     loop
       dbms_output.put_line
       ( 'Element ' || to_char(i) ||
         ' of array contains: ' ||
         substr(l_array(i),2)
       );
    end loop;
--	names := namesarray('Kavita', 'Pritam', 'Ayan', 'Rishav', 'Aziz');
--	total := names.count; 
--	p_err_code := '0';
-- 	FOR i in 1 .. total LOOP 
--      dbms_output.put_line('Student: ' || names(i) );
--   	END LOOP; 
--    FOR i IN 1..5
--    LOOP
--        INSERT INTO AHIHI VALUES ('2' || i);
--    END LOOP;
--    commit;
Exception
When others THEN
	p_err_code := '-1';
    dbms_output.put_line('Err: ' || sqlerrm || ' Trace: ' || dbms_utility.format_error_backtrace);
END
;



Hàm convert string to array  oracle 

CREATE OR REPLACE FUNCTION CBOND_SHB.fn_convert_string_to_array(p_str varchar2)
 RETURN dbms_utility.lname_array 
 IS

	l_input varchar2(4000) := p_str ;
    l_count binary_integer;
    l_array dbms_utility.lname_array;
   

BEGIN
    dbms_utility.comma_to_table
     ( list   => regexp_replace(l_input,'(^|,)','\1x')
      , tablen => l_count
      , tab    => l_array
    );
--     dbms_output.put_line(l_count);
--     for i in 1 .. l_count
--     loop
--       dbms_output.put_line
--       ( 'Element ' || to_char(i) ||
--         ' of array contains: ' ||
--         substr(l_array(i),2)
--       );
--    end loop;
	RETURN l_array;

Exception
When others then
    return l_array;
END

;




DROP SEQUENCE seq_sale_retype;

CREATE SEQUENCE seq_sale_retype
    INCREMENT BY 1
    START WITH 200
    MINVALUE 10
    MAXVALUE 10099999999999
    CYCLE
    CACHE 2;
   
   
DECLARE
P_ERR_FIELD VARCHAR2(32000);
P_ERR_CODE VARCHAR2(32000);
P_ERR_PARAM VARCHAR2(32000);
BEGIN
P_ERR_CODE := NULL;
P_ERR_PARAM := NULL;
-- Now Call the stored program
fopks_get_customer.prc_mt_cfmast_check
(p_strinput=>'NGUYEN#CONG#ANH',
pv_tlid=>'000001',
pv_role=>'AMC',
pv_action=>'EDIT',
pv_language=>'vie',
p_err_field=>p_err_field,
p_err_code=>p_err_code,
p_err_param=>p_err_param);
-- Output the results
dbms_output.put_line(P_ERR_FIELD);
dbms_output.put_line(P_ERR_CODE);
dbms_output.put_line(P_ERR_PARAM);
END;





   


DECLARE 
	 l_custid		varchar(60);
    l_age			numeric;
    l_count			numeric;
    l_DBCODE		varchar(10);
    l_currdate		date;
    l_custodycd		varchar(30);
    l_custtype		varchar(20);
    l_idtype		varchar(20);
    l_country       varchar(20);
    l_GRINVESTOR    varchar(20);
	l_iddate		varchar(20);
    l_idcode_old    varchar(30);
	
BEGIN
	FOR i IN 
(SELECT
	*
FROM
	(
	SELECT
		REGEXP_REPLACE(TRIM (fil.char_value), '\(|\)', '') fil_cond, fil.rid
	FROM
		(
		SELECT
			fn_pivot_string ( REGEXP_REPLACE ('000001000012~#~REVC000010~#~Trangg~#~TT~#~CN~#~TN~#~F~#~16/02/1997~#~005~#~0134049102~#~15/08/2008~#~HN~#~014912957~#~Hà Nội~#~null~#~234~#~null~#~null~#~0975128288~#~REVC000010@aaa.aaa~#~0134819415~#~ACB~#~HN~#~null~#~null~#~null~#~Y~#~null~#~null~#~01/01/0001~#~null~#~null~#~0003~#~TT~#~15/08/2028~#~Y~#~Y~#~null~#~Y~#~N~#~null~#~null~#~null~#~null~#~234~#~null~#~null~#~null~#~null~#~null~#~null~#~null~#~null~#~null~#~null~#~null~#~N~#~null~#~M~#~null~#~~#~~#~CN_GOLD~#~~#~', '~#~', '|')) filter_row
		FROM
			DUAL ), TABLE (filter_row) fil ) a)
	LOOP
		IF i.rid = '1' THEN 
			  l_custid := i.fil_cond;
		ELSIF i.rid = '2' THEN 
			  l_custodycd	:= i.fil_cond;
		ELSIF i.rid = '5' THEN 
			  l_custtype	:= i.fil_cond;
		ELSIF i.rid = '6' THEN 
			  l_GRINVESTOR	:= i.fil_cond;
		ELSIF i.rid = '9' THEN 
			  l_idtype	:= i.fil_cond;
		ELSIF i.rid = '11' THEN 
			  l_iddate	:= i.fil_cond;
		ELSIF i.rid = '16' THEN 
			  l_country	:= i.fil_cond;
		END if;
	
	
	END LOOP;
	
END ;		



DECLARE 

l_custid varchar2(500);
l_custodycd varchar2(500);
l_action varchar2(500);
l_err_code varchar2(500);
l_err_param varchar2(500);

BEGIN 
	 FOPKS_GET_CUSTOMER.prc_mt_cfmast_otp(l_custid,l_custodycd,'a','a','a','a','a','a','a','a','a','a',l_action,'a','a',l_err_code,l_err_param);
	DELETE FROM DRAFF_PHONG dp;
	INSERT INTO DRAFF_PHONG values(22277);
	INSERT INTO DRAFF_PHONG values(l_custid);
	dbms_output.put_line(l_custid);
	
END;



FUNCTION fnc_sid_getchkdigit
 RETURN varchar2
 IS


    v_Result varchar(50);

BEGIN
     --v_Result:= Trunc(dbms_random.value(10,99));
      SELECT floor(dbms_random.value*(99-10+1))+10 str INTO v_Result FROM dual;

      RETURN v_Result;

Exception
When others then
    return '-1';
END

;




