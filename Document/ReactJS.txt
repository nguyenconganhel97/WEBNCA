
//Sử dụng useEffect hook như componentDidMount
  useEffect(() => {
    const getUserAPI = 'https://5df8a4c6e9f79e0014b6a587.mockapi.io/freetuts/users'
 
    //Gọi API bằng axios
    axios.get(getUserAPI).then((res) => {
      // Cập nhật lại listUser bằng
      // Bạn có thể xem lại bài viết về useState()
      setListUser(res.data);
    }).catch((err) => {
      //Trường hợp xảy ra lỗi
      console.log(err);
      alert("Xảy ra lỗi");
    })
 
  }, [])
  
  
  
   //Sử dụng useEffect() như componentDidUpdate
  useEffect(() => {
    document.title = `(${count}) lần click`
  })
  
  
   useEffect(() => {
    //Được gọi khi component render
    console.log('render!');
    // useEffect trả về một hàm ,
    // hàm trả về đó là đóng vai trò như
    // là componentWillUnmount
    return () => console.log('unmounting...');
  })
  
  
  
  let email = 'nguyenconganhel@****#$@#$_2342';
var regExpr = /[^a-zA-Z0-9-. @*]/g;
console.log(email.replace(regExpr, ""))

replace(/[\D]/g, "");

let str = '2*R@R$@ccccc+_@#+++$@#$_'
let a = str.replace(/[\W]/g, "");
console.log(a)

const counter = (state = 0, action) => {
    //Kiểm tra điều kiện
    switch (action.type) {
        case 'INCREMENT':
            return state + 1;
    }
    return state;
};
 
 
 
 export defaults function App() {
    return (
        <>
            <Switch>
                <Route path="/" component={Home} exact />
                <Route path="/about" component={About} />
                <Route path="/shop" component={Shop} />
                <Route component={Error} />
            </Switch>
        </>
    )
}


//Component hiển thị danh sách người dùng
const ShowUser = (props) => {
  //Lấy giá tri của props listUser
  const { listUser } = props;
 
  // Render ra list user
  // React.Fragment cho phép bọc JSX lại.
  // List Keys :  chỉ định key, giúp loại bỏ cảnh báo.
  return (
    <div>
      {listUser.map((user, index) => {
        return (
          <React.Fragment key={user.id}>
            <ul>
              <li>{user.name}</li>
              <li>{user.email}</li>
            </ul>
            <hr />
          </React.Fragment>
        );
      })}
    </div>
  );
};


import { Upload, message, Icon } from 'antd';

<Upload {...propsPDF
                                                }
                                                    onChange={this.onChangeFile.bind(this)}
                                                >
                                                    <label className="btn btn-default glyphicon glyphicon-cloud-upload" style={{ padding: "5px 10px", fontSize: "14px", position: "absolute", right: "-22px" }}>
                                                        {/* <input type="upload" accept=".pdf,.xlsx,.csv" className="inputfile" /> */}
                                                    </label>
                                                    {/* <Button>
                                        <Icon type="upload" /> Click to Upload
                                </Button> */}
                                                </Upload>
												
												

const propsPDF = {
    name: 'pdf',
    // action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',
    // headers: {
    //   authorization: 'authorization-text',
    // },
    //cho phep up file pdf || image
    accept: "application/pdf, image/*",
    // accept:"application/pdf, image/png, image/jpeg",

};

  onChangeFile(info) {

        this.setState({ SIGN_IMG: null });
        let fileList = [...info.fileList];
        fileList = fileList.slice(-1);
        if (info.file.status !== 'uploading') {
            if (fileList[0].size < this.state.sizeDefault) {
                let arrayName = fileList[0].name;
                var index = 0;
                for (var x = 0; x < arrayName.length; x++) {
                    if (arrayName[x] == '.') {
                        index = x
                    }
                }

                this.setState({
                    fileSend: fileList,
                    filename: fileList[0].name,
                    typeFile: arrayName.slice(index + 1)

                });
            }
            else {
                toast.error(this.props.strings.sizeFile + this.state.sizeDefault / (1024*1024) + "MB", { position: toast.POSITION.BOTTOM_RIGHT })
            }

        }
        if (info.file.status === 'done') {
            message.success(`${info.file.name} file uploaded successfully`);
        } else if (info.file.status === 'error') {
            message.error(`${info.file.name} file upload failed.`);
        }
    }
 async sendFile() {


        let nameFileUpload = "";
        nameFileUpload = this.props.CUSTODYCD + "-" + this.state.TYPE + '-' + this.state.timeNow + "." + this.state.typeFile;


        const formData = new FormData();

        let listDemo = [];


        listDemo = this.state.fileSend

        if (listDemo.length > 0) {
            formData.set('OBJNAME', "UPLOADMANAGER");
            formData.set('p_language', "vie");
            formData.set('nameFileUpload', nameFileUpload);
            formData.set('path', this.state.path);
            if (listDemo)
                listDemo.map(item => {
                    if (item.originFileObj) formData.append('taiLieu', item.originFileObj);
                    else formData.append('taiLieu', item.url);
                });

            await RestfulUtils.post('/file/writeFileProfile', formData).then((resData) => {
                this.setState({
                    filename : "",
                });
            });




            let self = this;
            let { strings } = this.props;
            let obj = {
                ACTION: 'ADD',
                CUSTODYCD: this.props.CUSTODYCD,
                TYPE: this.state.TYPE || "GTK",
                // IMGSIGN: this.state.SIGN_IMG,
                URLFILE: this.state.path +"/"+ nameFileUpload,
                NOTE: this.state.upload.NOTE != "" ? this.state.upload.NOTE : "Add new file upload",
                OBJNAME: this.props.OBJNAME || '',
                language: this.props.currentLanguage
            }


            RestfulUtils.post('/account/insertUrlProfileUser', obj).then(function (res) {
                if (res.EC == 0) {
                    toast.success(strings.success, { position: toast.POSITION.BOTTOM_RIGHT });
                    self.close()
                    // self.refresh()
                    self.refreshList()
                }
                else {
                    toast.error(res.EM, { position: toast.POSITION.BOTTOM_RIGHT });
                }
            });
            // let MsgCheckValidate = this.checkValidate(obj)
            // if (MsgCheckValidate == 0) {
            //     RestfulUtils.post('/account/insertUrlProfileUser', obj).then(function (res) {
            //         if (res.EC == 0) {
            //             toast.success(strings.success, { position: toast.POSITION.BOTTOM_RIGHT });
            //             self.close()
            //             // self.refresh()
            //             self.refreshList()
            //         }
            //         else {
            //             toast.error(res.EM, { position: toast.POSITION.BOTTOM_RIGHT });
            //         }
            //     });
            // }
            // else {
            //     toast.error(this.props.strings["Error" + MsgCheckValidate], { position: toast.POSITION.BOTTOM_RIGHT })
            // }


        }
        else {
                toast.error(this.props.strings.notFile, { position: toast.POSITION.BOTTOM_RIGHT })
        }

    }


												
												
  
  
  
  
  
  